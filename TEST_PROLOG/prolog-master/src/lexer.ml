# 1 "lexer.mll"
 
    open Parser


    exception EndInput

# 9 "lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\234\255\235\255\236\255\237\255\238\255\239\255\240\255\
    \014\000\015\000\077\000\244\255\154\000\164\000\176\000\249\255\
    \192\000\014\000\020\000\028\000\254\255\255\255\252\255\251\255\
    \013\001\035\001\045\001\055\001\013\000\082\001\092\001\109\001\
    \033\000\245\255\119\001\129\001\139\001\149\001\026\000\035\000\
    \246\255\242\255\241\255\126\000\252\255\253\255\017\000\050\000\
    \255\255\254\255\219\001\252\255\058\002\120\001\255\255\198\001\
    \153\002\253\255\248\002\255\255\109\003\072\003\067\001\003\000\
    \243\255\244\255\245\255\246\255\247\255\248\255\249\255\250\255\
    \251\255\252\255\253\255\254\255\255\255\160\001\241\255\182\003\
    \240\255";
  Lexing.lex_backtrk =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\012\000\255\255\007\000\255\255\255\255\255\255\
    \005\000\255\255\255\255\002\000\255\255\255\255\255\255\255\255\
    \007\000\255\255\255\255\008\000\255\255\255\255\008\000\255\255\
    \255\255\255\255\008\000\255\255\255\255\008\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\003\000\003\000\
    \255\255\255\255\255\255\255\255\002\000\001\000\255\255\255\255\
    \255\255\255\255\001\000\255\255\255\255\255\255\255\255\013\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255";
  Lexing.lex_default =
   "\255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \255\255\255\255\255\255\000\000\255\255\255\255\255\255\000\000\
    \255\255\255\255\255\255\019\000\000\000\000\000\000\000\000\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\000\000\044\000\000\000\000\000\255\255\255\255\
    \000\000\000\000\255\255\000\000\255\255\255\255\000\000\255\255\
    \255\255\000\000\255\255\000\000\255\255\255\255\255\255\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\255\255\000\000\255\255\
    \000\000";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\021\000\021\000\000\000\063\000\063\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \021\000\000\000\011\000\063\000\000\000\019\000\255\255\015\000\
    \006\000\005\000\017\000\014\000\004\000\013\000\007\000\018\000\
    \012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
    \012\000\012\000\009\000\042\000\041\000\023\000\022\000\008\000\
    \049\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
    \010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
    \010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
    \010\000\010\000\010\000\003\000\048\000\002\000\000\000\010\000\
    \000\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\032\000\001\000\010\000\010\000\010\000\
    \010\000\010\000\010\000\010\000\010\000\010\000\010\000\033\000\
    \039\000\040\000\000\000\000\000\000\000\000\000\010\000\010\000\
    \010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
    \010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
    \010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
    \046\000\000\000\000\000\000\000\010\000\047\000\010\000\010\000\
    \010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
    \010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
    \010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
    \036\000\000\000\012\000\012\000\012\000\012\000\012\000\012\000\
    \012\000\012\000\012\000\012\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\000\000\025\000\
    \012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
    \012\000\012\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\000\000\000\000\000\000\000\000\000\000\025\000\
    \020\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\000\000\255\255\000\000\000\000\016\000\
    \000\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\026\000\000\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\035\000\000\000\
    \035\000\000\000\025\000\034\000\034\000\034\000\034\000\034\000\
    \034\000\034\000\034\000\034\000\034\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\000\000\025\000\077\000\077\000\077\000\077\000\077\000\
    \077\000\077\000\077\000\000\000\029\000\031\000\045\000\031\000\
    \028\000\055\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\000\000\000\000\
    \055\000\000\000\054\000\000\000\029\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\030\000\034\000\
    \034\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
    \034\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
    \034\000\034\000\034\000\037\000\037\000\037\000\037\000\037\000\
    \037\000\037\000\037\000\037\000\037\000\037\000\037\000\037\000\
    \037\000\037\000\037\000\037\000\037\000\037\000\037\000\055\000\
    \078\000\078\000\078\000\078\000\078\000\078\000\078\000\078\000\
    \000\000\000\000\029\000\000\000\000\000\000\000\038\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\055\000\000\000\
    \054\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\029\000\052\000\052\000\053\000\052\000\052\000\
    \052\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
    \052\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
    \052\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
    \052\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
    \052\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
    \052\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
    \052\000\052\000\052\000\052\000\052\000\052\000\052\000\051\000\
    \052\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
    \052\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
    \052\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
    \052\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
    \052\000\052\000\052\000\052\000\000\000\052\000\052\000\052\000\
    \052\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
    \052\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
    \052\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
    \052\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
    \052\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
    \052\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
    \052\000\052\000\052\000\052\000\052\000\052\000\000\000\052\000\
    \052\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
    \052\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
    \052\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
    \052\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
    \052\000\058\000\058\000\058\000\058\000\058\000\058\000\058\000\
    \059\000\058\000\058\000\058\000\058\000\058\000\058\000\058\000\
    \058\000\058\000\058\000\058\000\058\000\058\000\058\000\058\000\
    \058\000\058\000\058\000\058\000\058\000\058\000\058\000\058\000\
    \058\000\058\000\058\000\058\000\058\000\058\000\058\000\058\000\
    \058\000\058\000\058\000\058\000\058\000\058\000\058\000\058\000\
    \058\000\058\000\058\000\058\000\058\000\058\000\058\000\058\000\
    \058\000\058\000\058\000\058\000\058\000\057\000\058\000\058\000\
    \058\000\058\000\058\000\058\000\058\000\058\000\058\000\058\000\
    \058\000\058\000\058\000\058\000\058\000\058\000\058\000\058\000\
    \058\000\058\000\058\000\058\000\058\000\058\000\058\000\058\000\
    \058\000\058\000\058\000\058\000\058\000\058\000\058\000\058\000\
    \058\000\058\000\058\000\058\000\058\000\058\000\058\000\000\000\
    \058\000\058\000\058\000\058\000\058\000\058\000\058\000\058\000\
    \058\000\058\000\058\000\058\000\058\000\058\000\058\000\058\000\
    \058\000\058\000\058\000\058\000\058\000\058\000\058\000\058\000\
    \058\000\058\000\058\000\058\000\058\000\058\000\058\000\058\000\
    \058\000\058\000\058\000\058\000\058\000\058\000\058\000\058\000\
    \058\000\058\000\058\000\058\000\058\000\058\000\058\000\058\000\
    \058\000\058\000\058\000\058\000\000\000\058\000\058\000\058\000\
    \058\000\058\000\058\000\058\000\058\000\058\000\058\000\058\000\
    \058\000\058\000\058\000\058\000\058\000\058\000\058\000\058\000\
    \058\000\058\000\058\000\058\000\058\000\058\000\058\000\058\000\
    \058\000\058\000\058\000\058\000\058\000\058\000\058\000\064\000\
    \079\000\079\000\079\000\079\000\079\000\079\000\079\000\079\000\
    \079\000\079\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\079\000\079\000\079\000\079\000\079\000\079\000\065\000\
    \000\000\000\000\000\000\000\000\066\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\062\000\062\000\062\000\
    \062\000\062\000\062\000\062\000\062\000\000\000\000\000\000\000\
    \000\000\079\000\079\000\079\000\079\000\079\000\079\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\067\000\000\000\000\000\000\000\000\000\076\000\075\000\
    \063\000\068\000\069\000\074\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\073\000\000\000\000\000\000\000\072\000\
    \000\000\071\000\000\000\070\000\000\000\061\000\079\000\079\000\
    \079\000\079\000\079\000\079\000\079\000\079\000\079\000\079\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\079\000\
    \079\000\079\000\079\000\079\000\079\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\080\000\000\000\000\000\000\000\000\000\079\000\
    \079\000\079\000\079\000\079\000\079\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\255\255\063\000\063\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\000\000\063\000\255\255\000\000\019\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\008\000\009\000\017\000\018\000\000\000\
    \046\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\047\000\000\000\255\255\000\000\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\028\000\000\000\010\000\010\000\010\000\
    \010\000\010\000\010\000\010\000\010\000\010\000\010\000\032\000\
    \038\000\039\000\255\255\255\255\255\255\255\255\010\000\010\000\
    \010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
    \010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
    \010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
    \043\000\255\255\255\255\255\255\010\000\043\000\010\000\010\000\
    \010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
    \010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
    \010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
    \012\000\255\255\012\000\012\000\012\000\012\000\012\000\012\000\
    \012\000\012\000\012\000\012\000\013\000\013\000\013\000\013\000\
    \013\000\013\000\013\000\013\000\013\000\013\000\255\255\012\000\
    \014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\255\255\255\255\255\255\255\255\255\255\012\000\
    \000\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\255\255\019\000\255\255\255\255\016\000\
    \255\255\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\024\000\255\255\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\025\000\255\255\
    \025\000\255\255\024\000\025\000\025\000\025\000\025\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\026\000\026\000\026\000\
    \026\000\026\000\026\000\026\000\026\000\026\000\026\000\027\000\
    \027\000\027\000\027\000\027\000\027\000\027\000\027\000\027\000\
    \027\000\255\255\024\000\062\000\062\000\062\000\062\000\062\000\
    \062\000\062\000\062\000\255\255\027\000\029\000\043\000\029\000\
    \027\000\053\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\030\000\030\000\255\255\255\255\
    \053\000\255\255\053\000\255\255\027\000\031\000\031\000\031\000\
    \031\000\031\000\031\000\031\000\031\000\031\000\031\000\034\000\
    \034\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
    \034\000\035\000\035\000\035\000\035\000\035\000\035\000\035\000\
    \035\000\035\000\035\000\036\000\036\000\036\000\036\000\036\000\
    \036\000\036\000\036\000\036\000\036\000\037\000\037\000\037\000\
    \037\000\037\000\037\000\037\000\037\000\037\000\037\000\055\000\
    \077\000\077\000\077\000\077\000\077\000\077\000\077\000\077\000\
    \255\255\255\255\037\000\255\255\255\255\255\255\037\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\055\000\255\255\
    \055\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\037\000\050\000\050\000\050\000\050\000\050\000\
    \050\000\050\000\050\000\050\000\050\000\050\000\050\000\050\000\
    \050\000\050\000\050\000\050\000\050\000\050\000\050\000\050\000\
    \050\000\050\000\050\000\050\000\050\000\050\000\050\000\050\000\
    \050\000\050\000\050\000\050\000\050\000\050\000\050\000\050\000\
    \050\000\050\000\050\000\050\000\050\000\050\000\050\000\050\000\
    \050\000\050\000\050\000\050\000\050\000\050\000\050\000\050\000\
    \050\000\050\000\050\000\050\000\050\000\050\000\050\000\050\000\
    \050\000\050\000\050\000\050\000\050\000\050\000\050\000\050\000\
    \050\000\050\000\050\000\050\000\050\000\050\000\050\000\050\000\
    \050\000\050\000\050\000\050\000\050\000\050\000\050\000\050\000\
    \050\000\050\000\050\000\050\000\050\000\050\000\050\000\050\000\
    \050\000\050\000\052\000\052\000\255\255\052\000\052\000\052\000\
    \052\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
    \052\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
    \052\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
    \052\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
    \052\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
    \052\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
    \052\000\052\000\052\000\052\000\052\000\052\000\255\255\052\000\
    \052\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
    \052\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
    \052\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
    \052\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
    \052\000\056\000\056\000\056\000\056\000\056\000\056\000\056\000\
    \056\000\056\000\056\000\056\000\056\000\056\000\056\000\056\000\
    \056\000\056\000\056\000\056\000\056\000\056\000\056\000\056\000\
    \056\000\056\000\056\000\056\000\056\000\056\000\056\000\056\000\
    \056\000\056\000\056\000\056\000\056\000\056\000\056\000\056\000\
    \056\000\056\000\056\000\056\000\056\000\056\000\056\000\056\000\
    \056\000\056\000\056\000\056\000\056\000\056\000\056\000\056\000\
    \056\000\056\000\056\000\056\000\056\000\056\000\056\000\056\000\
    \056\000\056\000\056\000\056\000\056\000\056\000\056\000\056\000\
    \056\000\056\000\056\000\056\000\056\000\056\000\056\000\056\000\
    \056\000\056\000\056\000\056\000\056\000\056\000\056\000\056\000\
    \056\000\056\000\056\000\056\000\056\000\056\000\056\000\056\000\
    \058\000\058\000\058\000\058\000\058\000\058\000\058\000\255\255\
    \058\000\058\000\058\000\058\000\058\000\058\000\058\000\058\000\
    \058\000\058\000\058\000\058\000\058\000\058\000\058\000\058\000\
    \058\000\058\000\058\000\058\000\058\000\058\000\058\000\058\000\
    \058\000\058\000\058\000\058\000\058\000\058\000\058\000\058\000\
    \058\000\058\000\058\000\058\000\058\000\058\000\058\000\058\000\
    \058\000\058\000\058\000\058\000\058\000\058\000\058\000\058\000\
    \058\000\058\000\058\000\058\000\255\255\058\000\058\000\058\000\
    \058\000\058\000\058\000\058\000\058\000\058\000\058\000\058\000\
    \058\000\058\000\058\000\058\000\058\000\058\000\058\000\058\000\
    \058\000\058\000\058\000\058\000\058\000\058\000\058\000\058\000\
    \058\000\058\000\058\000\058\000\058\000\058\000\058\000\060\000\
    \061\000\061\000\061\000\061\000\061\000\061\000\061\000\061\000\
    \061\000\061\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\061\000\061\000\061\000\061\000\061\000\061\000\060\000\
    \255\255\255\255\255\255\255\255\060\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\060\000\060\000\060\000\
    \060\000\060\000\060\000\060\000\060\000\255\255\255\255\255\255\
    \255\255\061\000\061\000\061\000\061\000\061\000\061\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\060\000\255\255\255\255\255\255\255\255\060\000\060\000\
    \060\000\060\000\060\000\060\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\060\000\255\255\255\255\255\255\060\000\
    \255\255\060\000\255\255\060\000\255\255\060\000\079\000\079\000\
    \079\000\079\000\079\000\079\000\079\000\079\000\079\000\079\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\079\000\
    \079\000\079\000\079\000\079\000\079\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\079\000\255\255\255\255\255\255\255\255\079\000\
    \079\000\079\000\079\000\079\000\079\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255";
  Lexing.lex_base_code =
   "";
  Lexing.lex_backtrk_code =
   "";
  Lexing.lex_default_code =
   "";
  Lexing.lex_trans_code =
   "";
  Lexing.lex_check_code =
   "";
  Lexing.lex_code =
   "";
}

let rec token lexbuf =
   __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 56 "lexer.mll"
                        ( token lexbuf )
# 372 "lexer.ml"

  | 1 ->
# 57 "lexer.mll"
                        ( EOF )
# 377 "lexer.ml"

  | 2 ->
# 60 "lexer.mll"
                        ( token lexbuf )
# 382 "lexer.ml"

  | 3 ->
# 61 "lexer.mll"
                        ( comments 1 lexbuf )
# 387 "lexer.ml"

  | 4 ->
# 62 "lexer.mll"
                        ( raise (Failure "unmatched closed comment") )
# 392 "lexer.ml"

  | 5 ->
let
# 65 "lexer.mll"
              a
# 398 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 65 "lexer.mll"
                        ( ATOM a )
# 402 "lexer.ml"

  | 6 ->
# 66 "lexer.mll"
                        ( atoms "" lexbuf )
# 407 "lexer.ml"

  | 7 ->
let
# 69 "lexer.mll"
                  n
# 413 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 69 "lexer.mll"
                        ( INT   (int_of_string n)   )
# 417 "lexer.ml"

  | 8 ->
let
# 70 "lexer.mll"
                  f
# 423 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 70 "lexer.mll"
                        ( FLOAT (float_of_string f) )
# 427 "lexer.ml"

  | 9 ->
# 71 "lexer.mll"
                        ( FLOAT infinity            )
# 432 "lexer.ml"

  | 10 ->
# 72 "lexer.mll"
                        ( FLOAT neg_infinity        )
# 437 "lexer.ml"

  | 11 ->
# 75 "lexer.mll"
                        ( strings "" lexbuf )
# 442 "lexer.ml"

  | 12 ->
let
# 78 "lexer.mll"
                  v
# 448 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 78 "lexer.mll"
                        ( VAR v )
# 452 "lexer.ml"

  | 13 ->
# 81 "lexer.mll"
                        ( RULE      )
# 457 "lexer.ml"

  | 14 ->
# 82 "lexer.mll"
                        ( QUERY     )
# 462 "lexer.ml"

  | 15 ->
# 83 "lexer.mll"
                        ( PERIOD    )
# 467 "lexer.ml"

  | 16 ->
# 84 "lexer.mll"
                        ( LPAREN    )
# 472 "lexer.ml"

  | 17 ->
# 85 "lexer.mll"
                        ( RPAREN    )
# 477 "lexer.ml"

  | 18 ->
# 86 "lexer.mll"
                        ( COMMA     )
# 482 "lexer.ml"

  | 19 ->
# 87 "lexer.mll"
                        ( LBRACKET  )
# 487 "lexer.ml"

  | 20 ->
# 88 "lexer.mll"
                        ( RBRACKET  )
# 492 "lexer.ml"

  | 21 ->
# 89 "lexer.mll"
                        ( PIPE      )
# 497 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_token_rec lexbuf __ocaml_lex_state

and comments count lexbuf =
   __ocaml_lex_comments_rec count lexbuf 43
and __ocaml_lex_comments_rec count lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 92 "lexer.mll"
                        ( comments (1 + count) lexbuf )
# 509 "lexer.ml"

  | 1 ->
# 93 "lexer.mll"
                        ( match count with
                          | 1 -> token lexbuf
                          | n -> comments (n - 1) lexbuf
                        )
# 517 "lexer.ml"

  | 2 ->
# 97 "lexer.mll"
                        ( raise (Failure "unmatched open comment") )
# 522 "lexer.ml"

  | 3 ->
# 98 "lexer.mll"
                        ( comments count lexbuf )
# 527 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_comments_rec count lexbuf __ocaml_lex_state

and strings acc lexbuf =
   __ocaml_lex_strings_rec acc lexbuf 50
and __ocaml_lex_strings_rec acc lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 102 "lexer.mll"
                                                ( strings acc lexbuf )
# 539 "lexer.ml"

  | 1 ->
# 103 "lexer.mll"
                                                ( STRING acc )
# 544 "lexer.ml"

  | 2 ->
let
# 104 "lexer.mll"
                              s
# 550 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 104 "lexer.mll"
                                                ( strings (acc ^ s) lexbuf )
# 554 "lexer.ml"

  | 3 ->
# 105 "lexer.mll"
                                                ( escaped strings acc lexbuf )
# 559 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_strings_rec acc lexbuf __ocaml_lex_state

and atoms acc lexbuf =
   __ocaml_lex_atoms_rec acc lexbuf 56
and __ocaml_lex_atoms_rec acc lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 108 "lexer.mll"
                                    ( ATOM acc )
# 571 "lexer.ml"

  | 1 ->
let
# 109 "lexer.mll"
                              a
# 577 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 109 "lexer.mll"
                                    ( atoms (acc ^ a) lexbuf )
# 581 "lexer.ml"

  | 2 ->
# 110 "lexer.mll"
                                    ( escaped atoms acc lexbuf )
# 586 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_atoms_rec acc lexbuf __ocaml_lex_state

and escaped callback acc lexbuf =
   __ocaml_lex_escaped_rec callback acc lexbuf 60
and __ocaml_lex_escaped_rec callback acc lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 113 "lexer.mll"
                    ( callback (acc ^ (String.make 1 (char_of_int   7))) lexbuf )
# 598 "lexer.ml"

  | 1 ->
# 114 "lexer.mll"
                    ( callback (acc ^ (String.make 1 (char_of_int   8))) lexbuf )
# 603 "lexer.ml"

  | 2 ->
# 115 "lexer.mll"
                    ( callback (acc ^ (String.make 1 (char_of_int  12))) lexbuf )
# 608 "lexer.ml"

  | 3 ->
# 116 "lexer.mll"
                    ( callback (acc ^ (String.make 1 (char_of_int  10))) lexbuf )
# 613 "lexer.ml"

  | 4 ->
# 117 "lexer.mll"
                    ( callback (acc ^ (String.make 1 (char_of_int  13))) lexbuf )
# 618 "lexer.ml"

  | 5 ->
# 118 "lexer.mll"
                    ( callback (acc ^ (String.make 1 (char_of_int   9))) lexbuf )
# 623 "lexer.ml"

  | 6 ->
# 119 "lexer.mll"
                    ( callback (acc ^ (String.make 1 (char_of_int  11))) lexbuf )
# 628 "lexer.ml"

  | 7 ->
# 120 "lexer.mll"
                    ( callback (acc ^ (String.make 1 (char_of_int  27))) lexbuf )
# 633 "lexer.ml"

  | 8 ->
# 121 "lexer.mll"
                    ( callback (acc ^ (String.make 1 (char_of_int 127))) lexbuf )
# 638 "lexer.ml"

  | 9 ->
# 122 "lexer.mll"
                    ( callback (acc ^ "\\") lexbuf )
# 643 "lexer.ml"

  | 10 ->
# 123 "lexer.mll"
                    ( callback (acc ^  "'") lexbuf )
# 648 "lexer.ml"

  | 11 ->
# 124 "lexer.mll"
                    ( callback (acc ^ "\"") lexbuf )
# 653 "lexer.ml"

  | 12 ->
# 125 "lexer.mll"
                    ( callback acc lexbuf )
# 658 "lexer.ml"

  | 13 ->
# 126 "lexer.mll"
                                            ( callback acc lexbuf )
# 663 "lexer.ml"

  | 14 ->
let
# 127 "lexer.mll"
                o
# 669 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos (lexbuf.Lexing.lex_start_pos + 3) in
# 127 "lexer.mll"
                    ( callback (acc ^ (String.make 1 (char_of_int (
                        int_of_string ("0o" ^ o))))) lexbuf )
# 674 "lexer.ml"

  | 15 ->
let
# 129 "lexer.mll"
               h
# 680 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 129 "lexer.mll"
                    ( callback (acc ^ (String.make 1 (char_of_int (
                        int_of_string ("0" ^ (String.sub h 0 (
                            (String.length h) - 1))))))) lexbuf )
# 686 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_escaped_rec callback acc lexbuf __ocaml_lex_state

;;

# 133 "lexer.mll"
 
    (* Takes a string s and returns a list of tokens generated by lexing s *)
    let get_all_tokens s =
        let b = Lexing.from_string (s ^ "\n") in
            let rec g () =
                match token b with
                | EOF -> []
                | t -> t :: g () in
                    g ()

    (* Takes a string s and returns Some of a list of tokens or None *)
    let try_get_all_tokens s =
        try Some (get_all_tokens s) with
        | Failure _ -> None

# 709 "lexer.ml"
